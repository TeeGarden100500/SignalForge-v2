const { comboStrategies } = require('./comboStrategies');

// üëâ –ó–∞–º–µ–Ω—è–π —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ –ª—é–±—ã–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
const simulatedTags = [
  'RSI_OVERBOUGHT',
  'EMA_ANGLE',
  'VOLUME_SPIKE',
  'BREAKOUT',
  'ADX_TREND',
  'DOJI',
  'RSI_HIDDEN_BULL',
  'MACD_DIVERGENCE',
  'MEAN_REVERS_UP',
  'VOLUME_DROP',
  'RSI_DROP'
];

function comboTestRun(tags = simulatedTags) {
  console.log(`\nüß™ [COMBO TEST] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ —Ç–µ–≥–∞–º:\n`, tags, '\n');

  let fired = 0;

  for (const combo of comboStrategies) {
    const allMatch = combo.conditions.every(tag => tags.includes(tag));
    if (allMatch) {
      console.log(`‚úÖ COMBO —Å—Ä–∞–±–æ—Ç–∞–ª–∞: [${combo.name}]`);
      console.log(`${combo.message('TEST', '1h')}\n`);
      fired++;
    } else {
      console.log(`‚Äî ‚ùå [${combo.name}] ‚Äî —É—Å–ª–æ–≤–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∏`);
    }
  }

  if (fired === 0) {
    console.log(`‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ COMBO –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤.\n`);
  }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
comboTestRun();
