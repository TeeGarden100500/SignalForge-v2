// index.js ‚Äî –∑–∞–ø—É—Å–∫ SignalForge v2 —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π

const { startVolatilityLoop, onReady } = require('./ws/volatilitySelector');
const { connectToStreams } = require('./ws/smartWSManager');
const logger = require('./utils/logger');

function startBot() {
  logger.basic('üöÄ –ó–∞–ø—É—Å–∫ SignalForge v2...');

  // –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
  startVolatilityLoop();

  logger.basic('[index] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (onReady)...');

  onReady((topSymbols) => {
    if (!Array.isArray(topSymbols) || topSymbols.length === 0) {
      logger.error('[index] ‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç.');
      return;
    }

    logger.basic(`[index] ‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –¢–æ–ø –º–æ–Ω–µ—Ç: ${topSymbols.join(', ')}`);

    try {
      connectToStreams(topSymbols);
    } catch (streamErr) {
      logger.error('[index] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ WebSocket-–ø–æ—Ç–æ–∫–æ–≤:', streamErr?.message || streamErr);
    }
  });
}

startBot();
