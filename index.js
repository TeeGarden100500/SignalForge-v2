// index.js ‚Äî –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ SignalForge v2

const { startVolatilityLoop, onReady } = require('./ws/volatilitySelector');
const { connectToStreams } = require('./ws/smartWSManager');
const logger = require('./utils/logger');

function startBot() {
  logger.basic('üöÄ –ó–∞–ø—É—Å–∫ SignalForge v2...');

  // –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
  startVolatilityLoop();

  // –∂–¥—ë–º, –ø–æ–∫–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —Ç–æ–ø –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç
  onReady((topSymbols) => {
    if (!Array.isArray(topSymbols) || topSymbols.length === 0) {
      logger.error('[volatility] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç.');
      return;
    }

    logger.basic(`[volatility] –¢–æ–ø-${topSymbols.length} –º–æ–Ω–µ—Ç: ${topSymbols.join(', ')}`);

    try {
      connectToStreams(topSymbols);
    } catch (streamErr) {
      logger.error('[streams] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ WebSocket-–ø–æ—Ç–æ–∫–æ–≤:', streamErr?.message || streamErr);
    }
  });
}

startBot();
