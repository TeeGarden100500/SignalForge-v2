const WebSocket = require('ws');
const { DEBUG_LOG_LEVEL } = require('./config');
const { TOP_N_PAIRS } = require('./config');
const { CACHE_LIMITS } = require('./config');
const { checkMACDStrategy } = require('./core/strategyMACD');
const { applyStrategies } = require('./core/applyStrategies');
const { checkComboStrategies } = require('./core/checkCombo');
const { saveCacheToFile } = require('./cache/cacheSaver');
const { loadCacheFromFile } = require('./cache/cacheLoader');
const { loadFromGist, saveToGist } = require('./cache/gistSync');
const { GITHUB_CACHE_ENABLED } = require('./config');
const { isSymbolTradable, loadTradingSymbols } = require('./volatilitySelector');
const { removeSymbolsFromCache } = require('./cache/cacheManager');


const TIMEFRAMES = ['5m', '15m', '1h'];

const candleCache = {}; // { BTCUSDT: { '5m': [], '15m': [], '1h': [] } }
const sockets = {};     // { BTCUSDT_5m: WebSocket }
const LAST_UPDATE_TIMEOUT_MS = 1000 * 60 * 60 * 6; // 6 —á–∞—Å–æ–≤ –±–µ–∑ —Å–≤–µ—á–µ–π = —É–¥–∞–ª–∏—Ç—å
const LOG_CACHE_INTERVAL_MS = 5 * 60 * 1000; // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
const lastUpdatedAt = {}; // { BTCUSDT_5m: timestamp }

function log(...args) {
  if (DEBUG_LOG_LEVEL === 'verbose') {
    console.log(...args);
  }
}

function removeSymbolData(symbol) {
  removeSymbolsFromCache(candleCache, symbol);
  TIMEFRAMES.forEach(interval => {
    const key = `${symbol}_${interval}`;
    if (sockets[key]) {
      sockets[key].close();
      delete sockets[key];
    }
    if (lastUpdatedAt[key]) delete lastUpdatedAt[key];
  });
}

function subscribeToKlines(symbol) {
  TIMEFRAMES.forEach(interval => {
    const streamName = `${symbol.toLowerCase()}@kline_${interval}`;
    const url = `wss://stream.binance.com:9443/ws/${streamName}`;
    const socketKey = `${symbol}_${interval}`;

    const ws = new WebSocket(url);

    sockets[socketKey] = ws;

    ws.on('open', () => {
//      log(`üîå [WS] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${socketKey}`);
    });

    ws.on('message', (data) => {
      try {
        const json = JSON.parse(data);
        const kline = json.k;

        if (!kline.x) return; // –∂–¥—ë–º, –ø–æ–∫–∞ —Å–≤–µ—á–∞ –∑–∞–∫—Ä–æ–µ—Ç—Å—è (final)

        const candle = {
          time: kline.t,
          open: parseFloat(kline.o),
          high: parseFloat(kline.h),
          low: parseFloat(kline.l),
          close: parseFloat(kline.c),
          volume: parseFloat(kline.v),
        };

        if (!candleCache[symbol]) candleCache[symbol] = {};
        if (!candleCache[symbol][interval]) candleCache[symbol][interval] = [];

        const cache = candleCache[symbol][interval];
        cache.push(candle);

        if (cache.length > CACHE_LIMITS) cache.shift();
        
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ WS ${symbol} ${interval}:`, err.message);
      }
const candles = candleCache[symbol]?.[interval];
  if (!candles || candles.length < 10) return;

  const { signalTags, messages } = applyStrategies(symbol, candles, interval);
  messages.forEach(msg => log(`üì¢ ${msg}`));

  const combos = checkComboStrategies(symbol, signalTags, interval);
  combos.forEach(combo => {
    console.log(`üîó COMBO: ${combo.message}`);
      });
      });

    ws.on('error', err => {
      console.error(`‚ùó WS Error [${socketKey}]`, err.message);
    });

    ws.on('close', (code, reason) => {
    console.warn(`‚ö†Ô∏è WS –ó–∞–∫—Ä—ã—Ç [${socketKey}] –ö–æ–¥: ${code} –ü—Ä–∏—á–∏–Ω–∞: ${reason?.toString() || '–Ω–µ—Ç –ø—Ä–∏—á–∏–Ω—ã'}`);
    });
  });
}

async function startCandleCollector(pairs) {
  await loadTradingSymbols();
  const limitedPairs = pairs.slice(0, TOP_N_PAIRS);
  const valid = [];
  const removed = [];

  limitedPairs.forEach(p => {
    const sym = p.symbol || p;
    if (isSymbolTradable(sym)) {
      valid.push(sym);
    } else {
      removed.push(sym);
      removeSymbolData(sym);
    }
  });

  if (DEBUG_LOG_LEVEL === 'verbose' && removed.length) {
    console.log(`[WS] –ò—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏: ${removed.join(', ')}`);
  }

  valid.forEach(sym => {
    subscribeToKlines(sym);
  });
}

function getCandleCache() {
  return candleCache;
}

setInterval(() => {
  const now = Date.now();

  Object.entries(lastUpdatedAt).forEach(([key, lastUpdate]) => {
    if (now - lastUpdate > LAST_UPDATE_TIMEOUT_MS) {
      const [symbol] = key.split('_');
      removeSymbolData(symbol);
      console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫: ${key}`);
    }
  });
}, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤–µ—á–∏

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if (GITHUB_CACHE_ENABLED) {
  loadFromGist().then(gistCache => {
    Object.assign(candleCache, gistCache);
    console.log(`üóÇÔ∏è [GIST] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Gist: ${Object.keys(gistCache).length} —Å–∏–º–≤–æ–ª–æ–≤`);
  }).catch(err => {
    console.warn('‚ö†Ô∏è [GIST] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Gist. –§–æ–ª–±—ç–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.');
    const localCache = loadCacheFromFile();
    Object.assign(candleCache, localCache);
    console.log(`üóÇÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω: ${Object.keys(localCache).length} —Å–∏–º–≤–æ–ª–æ–≤`);
  });
} else {
  const loaded = loadCacheFromFile();
  Object.assign(candleCache, loaded);
  console.log(`üóÇÔ∏è –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω: ${Object.keys(loaded).length} —Å–∏–º–≤–æ–ª–æ–≤`);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
  console.log(`üåê –ê–∫—Ç–∏–≤–Ω—ã—Ö WebSocket –ø–æ—Ç–æ–∫–æ–≤: ${Object.keys(sockets).length}`);
  const mem = process.memoryUsage().heapUsed / 1024 / 1024;
  console.log(`üß† RAM usage: ${mem.toFixed(2)} MB`);
    if (GITHUB_CACHE_ENABLED) {
    saveToGist(candleCache);
  } else {
    saveCacheToFile(candleCache);
  }
}, 300_000);

// –≠—Ç–æ—Ç –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–º–µ—â—ë–Ω –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ —Ü–∏–∫–ª–∞, –≥–¥–µ –∫—ç—à –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è

module.exports = {
  startCandleCollector,
  getCandleCache,
  candleCache,
  removeSymbolData
};

setInterval(() => {
  if (DEBUG_LOG_LEVEL !== 'verbose') return;

  console.log(`\nüïí –û–±–∑–æ—Ä –∫—ç—à–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç):`);
  Object.entries(candleCache).forEach(([symbol, timeframes]) => {
    Object.entries(timeframes).forEach(([interval, candles]) => {
      const limit = CACHE_LIMITS[interval] || 100;
      const remaining = Math.max(0, limit - candles.length);

      log(`üïØÔ∏è [${symbol}][${interval}] –ö—ç—à: ${candles.length}/${limit} —Å–≤–µ—á–µ–π (${remaining} –¥–æ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)`);

      if (candles.length === limit) {
        console.log(`‚úÖ [${symbol}][${interval}] –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω (${limit})`);
      }
    });
  });
}, LOG_CACHE_INTERVAL_MS);
