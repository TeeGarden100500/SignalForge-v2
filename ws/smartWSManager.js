// üåê smartWSManager.js ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫–∏ —Å –ª–∏–º–∏—Ç–æ–º –∏ –∑–∞—â–∏—Ç–æ–π

const WebSocket = require('ws');
const config = require('../config/config');
const logger = require('../utils/logger');
const { handleIncomingCandle } = require('../logic/multiCandleCache');

let sockets = [];

function connectToStreams(symbols) {
  // ‚õî –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–∫–µ—Ç–æ–≤
  sockets.forEach(ws => {
    if (ws && ws.readyState === WebSocket.OPEN) {
      ws.close();
    }
  });
  sockets = [];

  const timeframes = Object.values(config.TIMEFRAMES);
  const maxConnections = config.MAX_WEBSOCKET_CONNECTIONS || 50;
  let activeCount = 0;

  for (const symbol of symbols) {
    for (const tf of timeframes) {
      if (activeCount >= maxConnections) {
        logger.verbose(`[ws] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${symbol} (${tf}) ‚Äî –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ${maxConnections}`);
        continue;
      }

      const streamName = `${symbol.toLowerCase()}@kline_${tf}`;
      const wsUrl = `wss://stream.binance.com:9443/ws/${streamName}`;

      try {
        const ws = new WebSocket(wsUrl);
        sockets.push(ws);
        activeCount++;

        ws.on('open', () => {
          logger.verbose(`[ws] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${symbol} (${tf})`);
        });

        ws.on('message', (msg) => {
          try {
            const json = JSON.parse(msg);
            const kline = json.k;
            if (kline && kline.x) {
              const candle = {
                symbol: symbol,
                tf: tf,
                time: Number(kline.t),
                open: kline.o,
                high: kline.h,
                low: kline.l,
                close: kline.c,
                volume: kline.v
              };
              handleIncomingCandle(candle);
            }
          } catch (e) {
            logger.error(`[ws] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${symbol} (${tf}):`, e.message);
          }
        });

        ws.on('error', (err) => {
          logger.error(`[ws] –û—à–∏–±–∫–∞ WebSocket –ø–æ ${symbol} (${tf}):`, err.message);
        });

        ws.on('close', () => {
          logger.verbose(`[ws] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: ${symbol} (${tf})`);
        });

      } catch (err) {
        logger.error(`[ws] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WebSocket –ø–æ ${symbol} (${tf}):`, err.message);
      }
    }
  }

  logger.basic(`[ws] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: ${activeCount}/${maxConnections}`);
}

module.exports = { connectToStreams };
