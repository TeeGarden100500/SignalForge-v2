const config = require('../config/config');
const logger = require('../utils/logger');
const { cache } = require('../logic/multiCandleCache');
const { calculateVolatility } = require('../logic/indicators');

function updateVolatilityRanking() {
  const results = [];
  const requiredLength = config.VOLATILITY_LOOKBACK / 5;

  const allSymbols = Object.keys(cache);

  allSymbols.forEach(symbol => {
    const candles = cache[symbol]?.[config.TIMEFRAMES.LEVEL_1] || [];

    logger.logInfo(`[volatility] ${symbol} [${config.TIMEFRAMES.LEVEL_1}] => ${candles.length} —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ`);

    if (candles.length < requiredLength) {
      return;
    }

    const vol = calculateVolatility(candles.slice(-requiredLength));
    results.push({ symbol, volatility: vol });
  });

  if (results.length < config.VOLATILITY_TOP_N) {
    logger.logError('[volatility] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ...');
    return;
  }

  results.sort((a, b) => b.volatility - a.volatility);

  const top = results.slice(0, config.VOLATILITY_TOP_N);
  logger.logInfo(`[volatility] üîù –¢–æ–ø-${config.VOLATILITY_TOP_N} –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: ${top.map(t => t.symbol).join(', ')}`);
}

setInterval(updateVolatilityRanking, config.VOLATILITY_REFRESH_INTERVAL_SEC * 1000);
