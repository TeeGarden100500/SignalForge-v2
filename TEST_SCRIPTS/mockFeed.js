const mockData = require('./testData/mock_candles_converted.json');
const { checkRSIStrategy } = require('../core/strategyRSI');
const { checkMACDStrategy } = require('../core/strategyMACD');
const { checkVolumeSpikeStrategy } = require('../core/strategyVolumeSpike');
const { checkEMACrossoverStrategy } = require('../core/strategyEMA');
const { checkEMAAngleStrategy } = require('../core/strategyEMA');
const { checkBreakoutStrategy } = require('../core/strategyBreakout');
const { checkHighLowProximity } = require('../core/strategyHighLow');

console.log(`üì• –ó–∞–ø—É—Å–∫ –º–æ–∫-—Ç–µ—Å—Ç–æ–≤ –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–∞—Ä–∞–º...\n`);

Object.entries(mockData).forEach(([key, candles]) => {
  if (!Array.isArray(candles) || candles.length === 0) {
    console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${key} ‚Äî –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
    return;
  }

  const [symbol, interval] = key.split('_');

  console.log(`\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞: ${symbol} [${interval}] (—Å–≤–µ—á–µ–π: ${candles.length})`);

const rsiResult = checkRSIStrategy(symbol, candles);
  if (rsiResult) {
    console.log(`üì¢ RSI –°–∏–≥–Ω–∞–ª: ${rsiResult.message}`);
  } else {
    console.log(`‚ÑπÔ∏è RSI: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞`);
  }

const macdResult = checkMACDStrategy(symbol, candles, interval);
  if (macdResult) {
    console.log(`üì¢ MACD –°–∏–≥–Ω–∞–ª: ${macdResult.message}`);
  } else {
    console.log(`‚ÑπÔ∏è MACD: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞`);
  }

const volumeResult = checkVolumeSpikeStrategy(symbol, candles, interval);
  if (volumeResult) {
    console.log(`üì¢ VOLUME SPIKE: ${volumeResult.message}`);
  } else {
    console.log(`‚ÑπÔ∏è Volume Spike: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞`);
  }

const emaResult = checkEMACrossoverStrategy(symbol, candles, interval);
if (emaResult) {
  console.log(`üì¢ EMA CROSSOVER: ${emaResult.message}`);
} else {
  console.log(`‚ÑπÔ∏è EMA: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞`);
}

const emaAngle = checkEMAAngleStrategy(symbol, candles, interval);
if (emaAngle) {
  console.log(`üì¢ EMA ANGLE: ${emaAngle.message}`);
} else {
  console.log(`‚ÑπÔ∏è EMA —É–≥–æ–ª: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞`);
}
  const breakout = checkBreakoutStrategy(symbol, candles, interval);
if (breakout) {
  console.log(`üì¢ BREAKOUT: ${breakout.message}`);
} else {
  console.log(`‚ÑπÔ∏è Breakout: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞`);
}
  const proximity = checkHighLowProximity(symbol, candles, interval);
if (proximity) {
  console.log(`üì¢ High/Low Proximity: ${proximity.message}`);
} else {
  console.log(`‚ÑπÔ∏è High/Low: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞`);
}
  
});
