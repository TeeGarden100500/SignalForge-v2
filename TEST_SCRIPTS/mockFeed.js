const mockData = require('./testData/mock_candles_converted.json');
const { checkRSIStrategy } = require('../core/strategyRSI');
const { checkMACDStrategy } = require('../core/strategyMACD');

console.log(`üì• –ó–∞–ø—É—Å–∫ –º–æ–∫-—Ç–µ—Å—Ç–æ–≤ –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–∞—Ä–∞–º...\n`);

Object.entries(mockData).forEach(([key, candles]) => {
  if (!Array.isArray(candles) || candles.length === 0) {
    console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${key} ‚Äî –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
    return;
  }

  const [symbol, interval] = key.split('_');

  console.log(`\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞: ${symbol} [${interval}] (—Å–≤–µ—á–µ–π: ${candles.length})`);

  const rsiResult = checkRSIStrategy(symbol, candles);
  if (rsiResult) {
    console.log(`üì¢ RSI –°–∏–≥–Ω–∞–ª: ${rsiResult.message}`);
  } else {
    console.log(`‚ÑπÔ∏è RSI: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞`);
  }

  const macdResult = checkMACDStrategy(symbol, candles, interval);
  if (macdResult) {
    console.log(`üì¢ MACD –°–∏–≥–Ω–∞–ª: ${macdResult.message}`);
  } else {
    console.log(`‚ÑπÔ∏è MACD: –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞`);
  }
});
