const { calculateMACDSeries } = require('./calculateMACDSeries');

function checkMACDDivergence(symbol, candles, timeframe) {
  const macdSeries = calculateMACDSeries(candles);
  if (!Array.isArray(macdSeries)) {
    console.log('[DEBUG] MACD Divergence: macdSeries is not an array');
    return null;
  }

  const validMACD = macdSeries.filter(x => x && x.macd != null && x.signal != null);
  console.log('[DEBUG] Valid MACD length:', validMACD.length);

  if (validMACD.length < 5) {
    console.log('[DEBUG] MACD Divergence: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è', symbol);
    return null;
  }

  const prevMACD = validMACD.at(-5);
  const currMACD = validMACD.at(-1);
  const prevPrice = candles.at(-5)?.close;
  const currPrice = candles.at(-1)?.close;

  console.log('[DEBUG] MACD Divergence:', symbol, {
    prevMACD, currMACD, prevPrice, currPrice
  });

  if (!prevMACD || !currMACD || prevPrice == null || currPrice == null) {
    console.log('[DEBUG] MACD Divergence: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
    return null;
  }

  const macdRising = currMACD.macd > prevMACD.macd;
  const macdDiff = Math.abs(currMACD.macd - prevMACD.macd);
  const priceFalling = currPrice < prevPrice;
  const priceDiff = Math.abs(currPrice - prevPrice);

  const macdSensitivity = 0.0001; // –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config
  const priceSensitivity = currPrice * 0.002; // 0.2% –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã

  if (priceFalling && macdRising && macdDiff > macdSensitivity && priceDiff > priceSensitivity) {
    return {
      symbol,
      strategy: 'MACD_DIVERGENCE',
      tag: 'MACD_DIVERGENCE',
      timeframe,
      message: `üîÑ [${symbol}] MACD –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –Ω–∞ ${timeframe}: —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç, MACD —Ä–∞—Å—Ç—ë—Ç ‚Äî –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–≤–µ—Ä—Ö`
    };
  }

  return null;
}

module.exports = { checkMACDDivergence };
