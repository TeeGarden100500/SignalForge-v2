const { calculateMACDSeries } = require('./calculateMACDSeries.js');

function checkMACDDivergence(symbol, candles, timeframe) {
  const macdSeries = calculateMACDSeries(candles);
  if (!Array.isArray(macdSeries) || macdSeries.length < 3) {
    console.log(`[DEBUG] MACD Divergence: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}`);
    return null;
  }

  const lastThree = macdSeries.slice(-3);
  const [macd1, macd2, macd3] = lastThree.map(v => v?.macd);
  const [c1, c2, c3] = candles.slice(-3);

  if ([macd1, macd2, macd3].some(v => typeof v !== 'number')) {
    console.log(`[DEBUG] MACD Divergence: null –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—á–∫–∞—Ö –¥–ª—è ${symbol}`);
    return null;
  }

  const priceNow = c3.close;
  const pricePrev = c1.close;

  // –û–±—Ä–∞—Ç–Ω–∞—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç, MACD —Ä–∞—Å—Ç—ë—Ç
  if (priceNow < pricePrev && macd3 > macd1) {
    return {
      symbol,
      timeframe,
      strategy: 'MACD_DIVERGENCE',
      tag: 'MACD_DIVERGENCE',
      message: `üü¢ [${symbol}] MACD –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç, MACD —Ä–∞—Å—Ç—ë—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã–π –æ—Ç—Å–∫–æ–∫`
    };
  }

  // –ü—Ä—è–º–∞—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: —Ü–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç, MACD –ø–∞–¥–∞–µ—Ç
  if (priceNow > pricePrev && macd3 < macd1) {
    return {
      symbol,
      timeframe,
      strategy: 'MACD_DIVERGENCE',
      tag: 'MACD_DIVERGENCE',
      message: `üî¥ [${symbol}] MACD –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: —Ü–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç, MACD –ø–∞–¥–∞–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑`
    };
  }

  return null;
}

module.exports = { checkMACDDivergence };
