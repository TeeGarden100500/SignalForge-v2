const { calculateEMA } = require('./indicators');
const { calculateEMAAngle } = require('./indicators');

let lastDirection = {}; // –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è

function checkEMACrossoverStrategy(symbol, candles, interval) {
  if (candles.length < 30) return null;

  const short = calculateEMA(candles, 9);
  const long = calculateEMA(candles, 21);
  if (!short || !long) return null;

  const key = `${symbol}_${interval}`;
  const prev = lastDirection[key];
  const current = short > long ? 'above' : 'below';

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  lastDirection[key] = current;

  if (!prev || prev === current) return null;

  const direction = current === 'above' ? 'LONG' : 'SHORT';
  const emoji = direction === 'LONG' ? 'üü¢' : 'üî¥';

  return {
    symbol,
    strategy: 'EMA_CROSSOVER',
    message: `${emoji} [${symbol}] EMA(9) ${direction === 'LONG' ? '–ø–µ—Ä–µ—Å—ë–∫ –≤–≤–µ—Ä—Ö' : '–ø–µ—Ä–µ—Å—ë–∫ –≤–Ω–∏–∑'} EMA(21)`
  };
}
function checkEMAAngleStrategy(symbol, candles, interval) {
  const result = calculateEMAAngle(candles, 21, 5);
  if (!result) return null;

  const threshold = 0.1; // —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (0.01 ‚âà —É–≤–µ—Ä–µ–Ω–Ω—ã–π –Ω–∞–∫–ª–æ–Ω)
  const { angle } = result;

  if (Math.abs(angle) < threshold) return null;

  const trend = angle > 0.001 ? '–≤–≤–µ—Ä—Ö ‚¨ÜÔ∏è' : '–≤–Ω–∏–∑ ‚¨áÔ∏è';
  return {
    symbol,
    strategy: 'EMA_ANGLE',
    message: `üìà [${symbol}] EMA(21) —É–≤–µ—Ä–µ–Ω–Ω–æ –Ω–∞–∫–ª–æ–Ω—ë–Ω ${trend} (—É–≥–æ–ª: ${angle})`
  };
}


module.exports = {
  checkEMACrossoverStrategy,
  checkEMAAngleStrategy,
};
