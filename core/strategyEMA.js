const { calculateEMA } = require('./indicators');
const { calculateEMAAngle } = require('./indicators');

let lastDirection = {}; // –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è

function checkEMACrossoverStrategy(symbol, candles, interval) {
  if (candles.length < 30) return null;

  const short = calculateEMA(candles, 9);
  const long = calculateEMA(candles, 21);
  if (!short || !long) return null;

  const key = `${symbol}_${interval}`;
  const prev = lastDirection[key];
  const current = short > long ? 'above' : 'below';

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  lastDirection[key] = current;

  if (!prev || prev === current) return null;

  const direction = current === 'above' ? 'LONG' : 'SHORT';
  const emoji = direction === 'LONG' ? 'üü¢' : 'üî¥';

  return {
    symbol,
    strategy: 'EMA_CROSSOVER',
    message: `${emoji} [${symbol}] EMA(9) ${direction === 'LONG' ? '–ø–µ—Ä–µ—Å—ë–∫ –≤–≤–µ—Ä—Ö' : '–ø–µ—Ä–µ—Å—ë–∫ –≤–Ω–∏–∑'} EMA(21)`
  };
}
function checkEMAAngleStrategy(candles, period = 21, depth = 5) {
  const requiredCandles = period + depth;
  if (candles.length < requiredCandles) return null;

  // –í—ã–¥–µ–ª—è–µ–º –æ—Ç—Ä–µ–∑–∫–∏
  const firstSegment = candles.slice(-requiredCandles, -depth); // –ø–µ—Ä–≤—ã–µ period —Å–≤–µ—á–µ–π
  const lastSegment = candles.slice(-period);                   // –ø–æ—Å–ª–µ–¥–Ω–∏–µ period —Å–≤–µ—á–µ–π

  // –í—ã—á–∏—Å–ª—è–µ–º EMA –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º –∏ –∫–æ–Ω–µ—á–Ω–æ–º –æ—Ç—Ä–µ–∑–∫–µ
  const emaStart = calculateEMA(firstSegment, period);
  const emaEnd = calculateEMA(lastSegment, period);

  if (emaStart == null || emaEnd == null) return null;

  const delta = emaEnd - emaStart;
  const angle = +(delta / depth).toFixed(4); // –ù–∞–∫–ª–æ–Ω EMA –º–µ–∂–¥—É –æ—Ç—Ä–µ–∑–∫–∞–º–∏

  return {
    emaStart,
    emaEnd,
    angle,
  };
}



module.exports = {
  checkEMACrossoverStrategy,
  checkEMAAngleStrategy,
};
