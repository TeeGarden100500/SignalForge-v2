const fs = require('fs');
const path = require('path');
const { comboStrategies } = require('../comboStrategies');

const logFilePath = path.join(__dirname, '../logs/combo_debug.log');

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(path.dirname(logFilePath))) {
  fs.mkdirSync(path.dirname(logFilePath), { recursive: true });
    }

function logToFile(message) {
  fs.appendFileSync(logFilePath, message + '\n');
    }

function checkComboStrategies(symbol, signals) {
  const fired = [];
  let total = 0;
  let firedCount = 0;

  for (const combo of comboStrategies) {
    total++;
    const missing = combo.conditions.filter(cond => !signals.includes(cond));
    if (missing.length === 0) {
      firedCount++;
      const msg = `‚úÖ COMBO "${combo.name}" —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è ${symbol}: ${combo.message}`;
      console.log(msg);
      logToFile(msg);
      fired.push({
        symbol,
        name: combo.name,
        message: combo.message,
        direction: combo.direction
      });
     } 
//     else {
//      const msg = `‚ùå COMBO "${combo.name}" –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è ${symbol}: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–µ–≥–æ–≤: ${missing.join(', ')}`;
//      console.log(msg);
//      logToFile(msg);
//    }
      }

//  const summary = `üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ COMBO —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: ${total} | –°—Ä–∞–±–æ—Ç–∞–ª–æ: ${firedCount}`;
  console.log(summary);
  logToFile(summary);
  logToFile(''); // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

  return fired;
      }

module.exports = {
  checkComboStrategies
};
