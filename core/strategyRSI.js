const { calculateRSI } = require('./indicators');

function checkRSIStrategy(symbol, candles, timeframe) {
  const rsi = calculateRSI(candles);

  if (rsi === null) return null;

  if (rsi < 20) {
    return {
      symbol,
      strategy: 'RSI_OVERSOLD',
      tag: 'RSI_OVERSOLD',
      timeframe,
      message: `üü¢ [${symbol}] RSI = ${rsi} ‚Üí –í–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)`,
    };
  }

  if (rsi > 80) {
    return {
      symbol,
      strategy: 'RSI_OVERBOUGHT',
      tag: 'RSI_OVERBOUGHT',
      timeframe,
      message: `üî¥ [${symbol}] RSI = ${rsi} ‚Üí –í–æ–∑–º–æ–∂–µ–Ω –æ—Ç–∫–∞—Ç (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)`,
    };
  }

  // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –∑–∞–≥–ª—É—à–∫–∞: –µ—Å–ª–∏ RSI –ø–æ–¥–Ω—è–ª—Å—è, –∞ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ ‚Äî –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
const rsiNow = rsi;
const rsiPrev = calculateRSI(candles.slice(0, -1)); // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É

if (rsiPrev !== null && rsiNow < rsiPrev - 5) {
  return {
    symbol,
    strategy: 'RSI_DROP',
    tag: 'RSI_DROP',
    timeframe,
    message: `üìâ [${symbol}] –†–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ RSI: —Å ${rsiPrev.toFixed(2)} –¥–æ ${rsiNow.toFixed(2)}`
  };
}
  return null;
}

module.exports = {
  checkRSIStrategy
};
